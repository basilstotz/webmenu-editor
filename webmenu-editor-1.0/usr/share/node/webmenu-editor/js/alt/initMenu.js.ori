



var fs = require('fs');
var spawn=require('child_process').spawn;

var allKeys="";
var akc=0;

var menuIn={};

var menuOut={
  "type": "menu",
  "name": {
    "en": "Categories",
    "fi": "Kategoriat",
    "sv": "Kategorier",
    "de": "Kategorien"
  },
  "items": []
};

var catInvisible={
  "type": "menu",
  "name": {
    "en": "Invisible",
    "fi": "Invisible",
    "sv": "Invisible",
    "de": "         "
  },
  "items": []
};


var catEmpty={};


/*
var filter={
  "denyCat" : [ "Interactive whiteboards" ],
  "denyApp" : [ "eleet", "Google Earth - Legacy" ],
  "allowKey": [ "n0","n1","z1","z2" ],
  "allowApp": []
};
*/

var filter={
      allowApp: []
};


function loadJSON(path) {
  return JSON.parse(fs.readFileSync(path,'utf-8'));
}
    
function saveJSON(path,json) {
  var jstring= JSON.stringify( json, null, 2);
  fs.writeFile( path, jstring, function(error){ } );
}

function is_ok_app(app){

  var n=getIdName(app); 
  //console.log("filter: *"+n+"*");
  for(var i=0;i<filter.allowApp.length;i++){
     if(filter.allowApp[i].toLowerCase().search(n.toLowerCase())!=-1){return true;} 
  }
  return false;
}

function is_ok_cat(cat){
  return true;
}

function countApps(){
  console.log("anzahl: "+filter.allowApp.length);
  return filter.allowApp.length;
 
}

/*
function getDisplayName(app){

  if(app.name){
    if(app.name.de){
        return app.name.de;
    }else{
        if(app.name.en){
           return app.name.en;
        }else{
           if(app.name.fi){
              return app.name.fi;
           }else{
              return app.name;
           }
       }
    }
  }else{
     if(app.source){
         return app.source;
     }else{
         return "*********************";
     }
  }
}
*/

function getIdName(app){

  if(app.source)return app.source;
  if(app.name){
    if(app.name.de){
        return app.name.de;
    }else{
        if(app.name.en){
           return app.name.en;
        }else{
           if(app.name.fi){
              return app.name.fi;
           }else{
              return app.name;
           }
       }
    }
  }else{
    return "*********************";
  }
}

function Menu(){

  this.menuNeu={
    "type": "menu",
    "name": {
      "en": "Categories",
      "fi": "Kategoriat",
      "sv": "Kategorier",
      "de": "Kategorien"
    },
    " items": []
   };

  this.catInvisible={
    "type": "menu",
    "name": {
    "en": "Invisible",
    "fi": "Invisible",
    "sv": "Invisible",
    "de": "         "
    },
    "items": []
    };

    this.newCat= new Cathegorie(this.catInvisible);
   


   this.filter={};
   this.menuIn={};
   this.menuOut=this.menuNeu;
  
   this.loadMenu = function(name) {
                  this.menuIn=loadJSON(name);
               };

   this.loadFilter = function(name) {
                  this.filter=loadJSON(name);
               };

   this.copyMenu = function(name) {
                  saveJSON(this.menuIn,name);
               };
   this.filter = function(){
                    if(!this.menuIn.name)this.menuIn=this.loadMenu('/opt/webmenu/menu.json');
                    if(!this.filter.allowApp)this.filter=this.loadFilter('/opt/webmenu/filter.json');


                    this.menuOut= filterTree(this.menuIn);

                    this.saveMenu(process.env.HOME+'/.config/webmenu/menu.json');
               };

   this.filterTree = function(menuIn){                 
                     var item= {};
                     var i;
                     var menu_count=0;

                     for(i=0;i<menuIn.items.length;i++){
                        item= menuIn.items[i];
                        if(item.type=="menu"){
                           menuOut.addItem(this.copyTree(item));              
                        }else{
                           if(is_ok_item(item)){
                              menuOut.addItem(item);
                              menu_count++;
                           }else{
                              this.catInvisible.addItem(item);
                           }                        
                        }
                     }
                     return this.menuOut.addItem(this.catInvisible);
                   };



}

function Cathegory(folder){

   this.type="menu";
   this.idName=getIdName(folder);
   this.displayName=getDisplayName(folder);
   this.osIconPath=folder.osIconPath;
   this.items=[];

   this.addItem= function(item){
                     this.items.push(item);
                 };

   this.display = function(){
                    console.log(this.displayName);
                 };
                     

}


function App(item){

   this.idName=getIdName(item);
   this.displayName=getDisplayName(item);
   this.type=item.type;
   this.osIconPath=item.osIconPath;

   this.display = function(){
                     console.log(this.displayName);
                  };
}
  

function copyMenu(menuIn){


  var menuOut= new Folder(menuIn);
  var item={};
  var i;

  for(i=0;i<menuIn.items.length;i++){
     item= menuIn.items[i];
     if(item.type=="menu"){
        menuOut.addItem(copyMenu(item));
     }else{
        menuOut.addItem(item);
     }
  }
  return menuOut;
}


function createFolder(item){

          var catEmpty={};

          catEmpty.items=[]; 
          catEmpty.type=item.type;

          if(item.name)catEmpty.name=item.name;
          if(item.descripption)catEmpty.description=item.description;
          if(item.keywords)catEmpty.keywords=item.keywords;
          if(item.id)catEmpty.id=item.id;

          if(item.osIcon){
             catEmpty.osIcon=item.osIcon;
          }else{
             catEmpty.osIconPath=item.osIconPath;
          }

          return catEmpty;
}


//////////////////////////////////////////////////////////////////

function compileMenu(){

var napps=countApps();
var flat= (napps<=20);


//akc=0;
var ic=0;
var ao; 
var co=0; //corresp. to i

for(var i=0;i<menuIn.items.length;i++){
  var cat =  menuIn.items[i];
  if(cat.type=="menu"){
    // if cathegorie is ok, add to menu
    if(true){

       //copy cathegorie
       if(flat){ 
          for(var j=0;j<cat.items.length;j++){
             var app=cat.items[j];
             if(is_ok_app(app)){
               menuOut.items[co++]=app;
             }
           }
        }else{
          catEmpty={};
          catEmpty.items=[]; 
          catEmpty.type=cat.type;
          catEmpty.name=cat.name;
          catEmpty.description=cat.description;

          if(cat.osIcon){
             catEmpty.osIcon=cat.osIcon;
          }else{
             catEmpty.osIconPath=cat.osIconPath;
          }

          if(cat.id){
             catEmpty.id=cat.id;
          }

          // copy content of cathegorie
          ao=0; //corresp. to j    
          for(var j=0;j<cat.items.length;j++){
             var app=cat.items[j];
             // if app is ok, add to menu
             //console.log("app: *"+getDisplayName(app)+"*");
             if(is_ok_app(app)){
               //console.log("is_ok_app");
               catEmpty.items[ao++]=app;
             }else{
               //console.log("is_no_app");
               catInvisible.items[ic++]=app;
             }
           }
           if(ao>0)menuOut.items[co++]=catEmpty;
         } // if flat

       } // if(is_ok_cat(cat))
    }else{  //cat.type!="menu"
      //nichts
    }  
  } //for menuIn.items
  if(ic>0)menuOut.items[co++]=catInvisible;
}


function getGroupName(){
  var n=process.env.GRUPPEN;
  //console.log("gruppen: "+n);
  nArray=n.split(":");
  var l=nArray.length;
  //console.log("laenge: "+l);

  for(var i=0;i<l;i++){
    if(nArray[i]=='lehrer')return 'lehrer';
  }

  for(var i=0;i<l;i++){
     //console.log("teste: "+nArray[i]);
     switch(nArray[i]){
        case '2010A': return '2010A';
        case '2010B': return '2010B';
        case '2011A': return '2011A';
        case '2011B': return '2011B';
        case '2012A': return '2012A';
        case '2012B': return '2012B';
        case '2013A': return '2013A';
        case '2013B': return '2013B';
        case '2014A': return '2014A';
        case '2014B': return '2014B';
        default: break;
     }
  }
  return "gibtesnicht";
}




function hosttype(){
 var ht=fs.readFileSync('/etc/puavo/hosttype','utf-8');

 return ht.slice(0,ht.length-1);
}

function smbget(src,dst){
           
          
           var ls=spawn("smbget", ["--nonprompt","--update","--outputfile "+dst, src ]);
           console.log("spawn"); 

/*
           ls.stdout.on('data', function (data) {
               console.log('stdout: ' + data);
           });

           ls.stderr.on('data', function (data) {
               console.log('stderr: ' + data);
           });

           ls.on('close', function (code) {
               console.log('child process exited with code ' + code);
           })
*/
}


function loadFilter(){

  var ownMenuName=process.env.HOME+'/.config/webmenu/filter.json';
  var ownSmbName='smb://bootserver/'+process.env.USER+'/.config/webmenu/filter.json';
  var groupMenuName='/home/share/share/bubendorf/'+getGroupName()+'/.config/webmenu/filter.json';
  var groupSmbName='smb://bootserver/share/share/bubendorf/'+getGroupName()+'/.config/webmenu/filter.json';
  var ownGroupName=process.env.HOME+"/.config/webmenu/group-filter.json"
  var schoolMenuName="/opt/webmenu/filter.json";


  var dateiName;
  var ht=hosttype();


  switch(ht){

     case 'fatclient*':
     case 'thinclient':

          console.log("fat!!");
          //eigenes
          if(fs.existsSync(ownMenuName)){
             return loadJSON(ownMenuName);
          }else{
             //gruppe
             if(fs.existsSync(groupMenuName)){
                 return loadJSON(groupMenuName);
             }else{
                 //schule
                 if(fs.existsSync(schoolMenuName)){
                    return loadJSON(schoolMenuName);
                 }else{
                    return null;
                 }
             }
          }
          break;

     case 'laptop':

          console.log("laptop!!");
          smbget(ownSmbName,ownMenuName);
          smbget(groupSmbName,ownGroupName);

          if(fs.existsSync(ownMenuName)){
             return loadJSON(ownMenuName);
          }else{
             //gruppe
             if(fs.existsSync(ownGroupName)){
                 return loadJSON(ownGroupName);
             }else{
                 //schule
                 if(fs.existsSync(schoolMenuName)){
                    return loadJSON(schoolMenuName);
                 }else{
                    return null;
                 }
             }
          }
          break;

     default: 
             console.log("default: ????????????????'");
             return null;
          break;

  }
}

var i=2;
//console.log("args:");
while(process.argv[i]){
  switch(process.argv[i]){
    case '-i': //set input file
          console.log("-i "+process.argv[++i]);
        break;
    case '-o': //set outputfile
          console.log("-o "+process.argv[++i]);
        break;
    case '-f': //set filter file
          console.log("-f "+process.argv[++i]);
        break;
    case '-d': //set depth
          console.log("-d "+process.argv[++i]);
        break;
    case '-n': //no other apps allowed
            console.log("-n ");
        break;
    case '-?':
    case '-h': 
    default: 
  console.log("usage: env GRUPPEN=\"$(groups|sed 's/ /:/g')\" node "+process.argv[1]+" [-i infile] [-o outfile] [-f filtefile] [-d output depth] [-n no other app than in filter]");
        return 0;
        break;

  }
  i++;
}




//main
menuIn=loadJSON(process.env.HOME+"/alle.json");
//menuIn=loadJSON('/opt/webmenu/menu.json');
filter=loadFilter();
if(!filter){
    console.log("fehler: keine filter gefunden");
}else{
    compileMenu();
    saveJSON(process.env.HOME+'/.config/webmenu/menu.json',menuOut);
//spawn("webmenu-spawn" , [ '--webmenu-exit' ] );
}
